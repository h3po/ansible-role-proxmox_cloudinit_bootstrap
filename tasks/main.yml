---
- name: get new vmid
  when: proxmox_new_vmid is not defined
  block:
    - name: get the next free vmid
      ansible.builtin.command: pvesh get /cluster/nextid
      changed_when: false
      register: nextid
    
    - name: set new vm id
      ansible.builtin.set_fact:
        proxmox_new_vmid: "{{ nextid.stdout }}"

- name: clone the template
  ansible.builtin.command: >-
    qm clone {{ proxmox_cloudimage_template_vmid }} {{ proxmox_new_vmid }}
    -full -storage {{ proxmox_vm_storage }}
    -name {{ inventory_hostname }}
    {{ '-pool %s' % proxmox_vm_pool if proxmox_vm_pool is defined }}
    {{ '-target %s' % proxmox_vm_node if proxmox_vm_node is defined }}
  changed_when: true
  register: qmclone

- name: create temporary directory locally for the ssh key
  ansible.builtin.tempfile:
    state: directory
  delegate_to: localhost
  register: localtempdir
  become: false
  notify: cleanup temporary directory
  when: proxmox_bootstrap_sshkey == "random"

- name: create temporary directory on the proxmox host for the ssh key
  ansible.builtin.tempfile:
    state: directory
  register: remotetempdir

- name: generate one-time ssh key for the vm
  ansible.builtin.openssh_keypair:
    path: "{{ localtempdir.path }}/{{ inventory_hostname_short }}_id_rsa"
    type: rsa
    size: 2048
    state: present
  delegate_to: localhost
  become: false
  when: proxmox_bootstrap_sshkey == "random"

- name: copy the new public key to the proxmox host
  ansible.builtin.copy:
    src: "{{ localtempdir.path }}/{{ inventory_hostname_short }}_id_rsa.pub"
    dest: "{{ remotetempdir.path }}/{{ inventory_hostname_short }}_id_rsa.pub"
    mode: 0600
  when: proxmox_bootstrap_sshkey == "random"

- name: write the bootstrap public key to the proxmox host
  ansible.builtin.copy:
    content: "{{ proxmox_bootstrap_sshkey }}"
    dest: "{{ remotetempdir.path }}/{{ inventory_hostname_short }}_id_rsa.pub"
    mode: 0600
  when: proxmox_bootstrap_sshkey != "random"

- name: configure the vm
  ansible.builtin.command: >-
    qm set {{ proxmox_new_vmid }}
    {{ '-cores %s' % proxmox_cores_spec if proxmox_cores_spec is defined }}
    {{ '-cpu cputype=%s' % proxmox_cputype_spec if proxmox_cputype_spec is defined }}
    {{ '-cpuunits %s' % proxmox_cpuunits_spec if proxmox_cpuunits_spec is defined }}
    {{ '-memory %s' % proxmox_memory_spec if proxmox_memory_spec is defined }}
    {{ '-balloon %s' % proxmox_balloon_spec if proxmox_balloon_spec is defined }}
    {{ '-shares %s' % proxmox_memory_shares_spec if proxmox_memory_shares_spec is defined }}
    {{ '-net0 virtio,bridge=%s' % proxmox_bridge_device_spec if proxmox_bridge_device_spec is defined }}{{ ',tag=%s' % proxmox_bridge_vlan_spec if proxmox_bridge_vlan_spec is defined }}
    {{ '-ipconfig0 ip=%s' % proxmox_bridge_device_ipaddr if proxmox_bridge_device_ipaddr is defined and proxmox_bridge_device_spec is defined }}{{ ',gw=%s' % proxmox_bridge_device_gw if proxmox_bridge_device_gw is defined and proxmox_bridge_device_ipaddr is defined and proxmox_bridge_device_spec is defined }}
    {{ '-nameserver %s' % proxmox_nameserver if proxmox_nameserver is defined }}
    {{ '-searchdomain %s' % proxmox_searchdomain if proxmox_searchdomain is defined }}
    -ciuser {{ proxmox_bootstrap_user }}
    -sshkey {{ remotetempdir.path }}/{{ inventory_hostname_short }}_id_rsa.pub
  changed_when: true
  register: qmset

- name: delete remote temporary directory
  ansible.builtin.file:
    path: "{{ remotetempdir.path }}"
    state: absent
  when: remotetempdir is defined

- name: get vm config # inventory_hostname_short reflects the delegated host
  ansible.builtin.command:
    cmd: pvesh get /nodes/{{ proxmox_vm_node if proxmox_vm_node is defined else inventory_hostname_short }}/qemu/{{ proxmox_new_vmid }}/config --output-format json
  register: vm_config
  changed_when: true

- name: convert vm config to json
  ansible.builtin.set_fact:
    vm_config: "{{ vm_config.stdout | from_json }}"

- name: set primary_disk
  ansible.builtin.set_fact:
    primary_disk: >-
      {{ 'virtio0' if vm_config.virtio0 is defined else
      'scsi0' if vm_config.scsi0 is defined else
      'ide0' if vm_config.ide0 is defined else 'undefined' }}
- name: fail if proxmox_disk_spec is defined but no primary_disk is found
  ansible.builtin.fail:
    msg: proxmox_disk_spec is defined but no primary_disk is found
  run_once: true
  when: proxmox_disk_spec is defined and primary_disk == 'undefined'

- name: resize the disk
  ansible.builtin.command: >-
    qm resize {{ proxmox_new_vmid }} {{ primary_disk }} {{ proxmox_disk_spec }}
  changed_when: true
  when: proxmox_disk_spec is defined

- name: start the vm
  ansible.builtin.command: qm start {{ proxmox_new_vmid }}
  changed_when: true
  register: qmstart

- name: wait for qemu-guest-agent to return an ip address
  ansible.builtin.command: qm guest cmd {{ proxmox_new_vmid }} network-get-interfaces
  changed_when: false
  register: qmguestcmd
  failed_when: false
  delay: 1
  retries: 30
  until: >-
    (
      (
        (qmguestcmd.stdout or "[]") | from_json | rejectattr('name', 'equalto', 'lo') | first | default({})
      ).get('ip-addresses', []) | selectattr('ip-address-type', 'equalto', 'ipv4') | first | default({})
    ).get('ip-address', "") != ""

- name: grow the root partition
  ansible.builtin.command: qm guest exec {{ proxmox_new_vmid }} growpart /dev/vda 1
  register: grow_root_partition
  failed_when: (grow_root_partition.stdout | from_json).exitcode != 0 and "NOCHANGE" not in (grow_root_partition.stdout | from_json)['out-data']
  changed_when: "'NOCHANGE' not in (grow_root_partition.stdout | from_json)['out-data']"
  when: proxmox_disk_spec is defined
  ignore_errors: true

- name: grow the root filesystem
  ansible.builtin.command: qm guest exec {{ proxmox_new_vmid }} resize2fs /dev/vda1
  register: grow_root_fs
  failed_when: (grow_root_fs.stdout | from_json).exitcode != 0
  changed_when: "'Nothing to do' not in ((grow_root_fs.stdout | from_json).get('err-data', ''))"
  when: proxmox_disk_spec is defined and not grow_root_partition.failed

- name: override ansible_host with fresh ip address
  ansible.builtin.set_fact:
    ansible_host: >-
      {{
        (
          (
            (qmguestcmd.stdout or "[]") | from_json | rejectattr('name', 'equalto', 'lo') | first
          ).get('ip-addresses') | selectattr('ip-address-type', 'equalto', 'ipv4') | first
        ).get('ip-address')
      }}
    proxmox_cloudimage_guestfs_needs_growing: "{{ grow_root_partition.failed | default(False) }}"
    ansible_ssh_extra_args: "{{ ansible_ssh_extra_args | default('') }} -o StrictHostKeyChecking=no -o UpdateHostKeys=yes"

- name: override ansible connection variables for bootstrap ssh key
  ansible.builtin.set_fact:
    ansible_user: "{{ proxmox_bootstrap_user }}"
    ansible_ssh_private_key_file: "{{ localtempdir.path }}/{{ inventory_hostname_short }}_id_rsa"
    ansible_ssh_extra_args: "{{ ansible_ssh_extra_args }} -o AddKeysToAgent=no"
  when: proxmox_bootstrap_sshkey == "random"

- name: wait 60s for ssh service to come up
  ansible.builtin.wait_for:
    port: 22
    host: '{{ ansible_host }}'
    sleep: 1
    timeout: 60
  connection: local
